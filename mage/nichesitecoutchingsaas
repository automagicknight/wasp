app nichesitecoutchingsaas {
  wasp: {
    version: "^0.11.4"
  },
  title: "nichesitecoutchingsaas",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int       @id @default(autoincrement())
    username String    @unique
    password String
    websites Website[]
psl=}

entity Website {=psl
    id       Int       @id @default(autoincrement())
    name     String
    seoscore Int       @default(0)
    keywords Keyword[]
    articles Article[]
    user     User      @relation(fields: [userId], references: [id])
    userId   Int
psl=}

entity Keyword {=psl
    id        Int     @id @default(autoincrement())
    value     String
    website   Website @relation(fields: [websiteId], references: [id])
    websiteId Int
psl=}

entity Article {=psl
    id        Int     @id @default(autoincrement())
    title     String
    body      String
    wordCount Int
    website   Website @relation(fields: [websiteId], references: [id])
    websiteId Int
psl=}

action createWebsite {
  fn: import { createWebsite } from "@server/actions.js",
  entities: [User, Website]
}

action addKeyword {
  fn: import { addKeyword } from "@server/actions.js",
  entities: [Keyword]
}

action generateArticle {
  fn: import { generateArticle } from "@server/actions.js",
  entities: [Website, Article]
}

query getUserWebsites {
  fn: import { getUserWebsites } from "@server/queries.js",
  entities: [Website]
}

query getWebsite {
  fn: import { getWebsite } from "@server/queries.js",
  entities: [Website, Keyword, Article]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { Dashboard } from "@client/pages/Dashboard.jsx",
  authRequired: true
}

route WebsiteRoute { path: "/website/:websiteId", to: WebsitePage }
page WebsitePage {
  component: import { Website } from "@client/pages/Website.jsx",
  authRequired: true
}
